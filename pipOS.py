import pygame, sys, os, pickle, pygame.freetype, time
from pygame._sdl2 import Window
pygame.freetype.init()
#from SCRIPZ.header import Header

os.chdir('Assets/')

pygame.init
scrx, scry = 876, 700    # was screen_width and screen_height
screen = pygame.display.set_mode((scrx, scry), pygame.NOFRAME,)
pygame.mouse.set_visible(False)
clock = pygame.time.Clock()
running = True


backColr = ( 0, 4, 0)
#mainColr = pygame.image.load(os.path.join('./ConditionBody0/1.png'))     #(20, 200, 20)
#mainColr = pygame.transform.scale_by(mainColr, 1)
colr = (0, 200, 100)
secolr = (0, 20, 0)
maintab = 1
headerxzs = 1    #change when have the dial to be whicherver th edial is pointing to

class rad(pygame.sprite.Sprite):
    def __init__(self, width, height):
        super().__init__()
        self.images = []         #color.convert_alpha()
        self.index = 0
        for num in range(1, 32):
            img = pygame.image.load(f'sprites/bodycond0frames/{num}.png')
            self.images.append(img)
            self.images.append(img)
            self.images.append(img)
        
        self.image = self.images[self.index]
        
        #self.image.fill(colr, special_flags=pygame.BLEND_RGBA_MIN)
       
        self.rect = self.image.get_rect()
        self.image.fill((255, 255, 255, 0), special_flags=pygame.BLEND_RGBA_MAX)
        self.image.fill(colr, special_flags=pygame.BLEND_RGBA_MIN)
        self.rect.center = (5*(scrx/12), 5*(scry/12))
        #pygame.image.load(os.path.join('./1.png'))


    def update(self):

        self.index = self.index+1
        if self.index >= len(self.images):
            self.index = 0
        self.image = self.images[self.index]
        #self.image.fill((255, 255, 255, 0), special_flags=pygame.BLEND_RGBA_MAX)
        #self.image.fill(colr, special_flags=pygame.BLEND_RGBA_MIN)
        
        #self.rect.center = (5*(scrx/12), 5*(scry/12))
        self.rect.x = 5*(scrx/12)
        self.rect.y = 5*(scry/12)


def GeneralGUI():
    global headerxzs
    zfontzs = pygame.freetype.Font(f'fonts/4_$Terminal_Font_Share-TechMono.ttf', 30)
    zfontzs.render_to(screen, (170, 5), ('STATS'), (colr))  
    zfontzs.render_to(screen, (280, 5), ('ITEMS'), (colr))  
    zfontzs.render_to(screen, (398, 5), ('DATA'), (colr))   # difference of 23 between
    zfontzs.render_to(screen, (500, 5), ('MAP'), (colr))   
    zfontzs.render_to(screen, (578, 5), ('RADIO'), (colr))  
    
    pygame.draw.rect(screen, colr, (20, 30, 3, 10))
    pygame.draw.rect(screen, colr, (scrx-23, 30, 3, 10))
    if headerxzs == 1:
        a, b = 142, 253
    if headerxzs == 2:
        a, b = 252, 363
    if headerxzs == 3:
        a, b = 366, 470
    if headerxzs == 4:
        a, b = 472, 551
    if headerxzs == 5:
        a, b = 550, 665

    pygame.draw.rect(screen, colr, (20, 30, a, 3))
    pygame.draw.rect(screen, colr, (b, 30, 856-b, 3))

    pygame.draw.rect(screen, colr, (20+a-3, 15, 3, 15))
    pygame.draw.rect(screen, colr, (20+a, 15, 5, 3))

    pygame.draw.rect(screen, colr, (b, 15, 3, 15))
    pygame.draw.rect(screen, colr, (b-5, 15, 5, 3))
    


    #pygame.draw.rect(screen, colr, (20, 30, 418 - prlkts, 3))
    #pygame.draw.rect(screen, colr, (418 + prlkts, 30, 418 -prlkts + 20, 3))


    
    pygame.draw.rect(screen, secolr, (40, 40,200, 30))


allem = []
printtime = 0

binorword = "b"
amountstartlines = 34
zfontzs = pygame.freetype.Font(f'fonts/4_$Terminal_Font_Share-TechMono.ttf', 10)
def delay_print(s):
    if len(allem) == amountstartlines:
        del allem[0]
    allem.append('')
    if binorword == "b":
        allem[(len(allem)-1)] = ((allem[(len(allem)-1)]+s))
        screen.fill(backColr)
        for aasea in range(0, amountstartlines):
            if len(allem) > aasea:
                zfontzs.render_to(screen, (50, 15+(aasea*20)), ((allem[aasea])), (colr))
        pygame.display.update()
    else:
        for c in s:
            screen.fill(backColr)
            allem[(len(allem)-1)] = (allem[(len(allem)-1)]+c)
            time.sleep(printtime)
            #print(allem, amountstartlines)
            for aasea in range(0, amountstartlines):
                if len(allem) > aasea:
                    if len(allem)-1 == aasea:
                        zfontzs.render_to(screen, (35, 40+(aasea*30)), ((allem[aasea]+"|")), (colr))
                        
                    else:
                        zfontzs.render_to(screen, (35, 40+(aasea*30)), ((allem[aasea])), (colr))
                    print(aasea, len(allem))
                #time.sleep(.1)
                pygame.display.update()

    #pygame.display.update()


class deitrix:
    
    def Bootstrap():
        global printtime, amountstartlines, allem, binorword, zfontzs

        delay_print("01011010111001001011111001110111000010011001001001001001010010100011000100011010101110101011011001001010010001001001")
        delay_print("1010000000111110111001010111101011001110100010010010010010100101000110001000101011001101110001100100110")
        delay_print("110011000001100010001111110001001001001001010010100011000100010111101010010000011101001101011110010110110")
        delay_print("1000000110010111010101000110010010010010010100101000110001000000100111101011111111011101001000100111")
        delay_print("000010001100001111111011010001001001001001010010100011000100001000111110000110011001001110000110010010010100101000110")
        delay_print("1110100111111110001100110000010010010010010100101000110001000011000010010010010111001011000101100101001001010010")
        delay_print("11001100101000110011010000000100100100100101001010010010010010010100101000110001000000110001000110000110100010000101001000010101100100100101001000")
        delay_print("0011110000100010000111110010010010010010010100101000110001000110001010111110010010011110100010000101001000010")
        delay_print("010110101110010010111110011100100100100100101001010001100010000111000010011110101011101010110100010000101001000010")
        delay_print("10100000001111101110010100100100100100101001010001100010000111001001001001001010010100011000100010101100111010101011001100100100101001010001101")
        delay_print("110011000001100010001111110100100100100100101001010001100010000111101010010000011101001110010010010100101000110010111")
        delay_print("1000000110010111010101000110000100100100100101001010001100010000100111101011111111011101001000")
        delay_print("00001000110000111111101101001001000010010010010010100101000110001000100100100101001010001100010000001111100100100100101001010001101100001")
        delay_print("11101001111111100011001100001001001001001001010010100011000100010000100100100100101001010001100010010111001011000101")
        delay_print("110011001010001100110100000110010010010010010100101000110001000001001010010010010100101000110000010101")
        delay_print("00111100001000100001111100111001001000100100100100101001010001100010000100100101001010001100010000001010v00100110010010010100101000110110111110")
        delay_print("01011010111001001011111001110001001001001001010010100011000100011100001001111010101110100100100101001010001101101")
        delay_print("101000000011111011100100100100100100101001010001100010000101111010110011101010101101001001001010010100011001110001")
        delay_print("1100110000011000100011001001001001001010010100011000100011110101111010100100000110010010010100101000110010011010111")
        delay_print("100000011001011101010100100100100100101001010001100010000001100010011110101111111100100100101001010001101001000")
        delay_print("00001000110000111100100100100001001001001001010010100011000100010010100101000110001000111011010010001111101001001001010010100011010010011100001")
        delay_print("111010011111111000110011001001001001001010010100011000100000001110010010010100101000110010111001011000101")
        delay_print("1100110010100011001101000001100010010010010100101000110001000010101")
        delay_print("001111000010001000011111001001001001001010010100011000100000111000101011111001001001001010010100011010011110111110")
        delay_print("0101101011100100101111100111011100100100100101001010001100111101010111010101101")
        delay_print("1010000000111110111001010111101011001110101001001001010010100011001011001101110001")
        delay_print("11001100000110001000111111010111101010010000010010010010100101000110011010111")
        delay_print("1000000110010111010101000010010010010010100101000110001000011000100111101011v11011101001000")
        delay_print("000010001100001111110010010010100101000110110010011100001")
        delay_print("1111001001001010010100011000010010010010111001011000101")
        delay_print("1100110010100011001110010010010100101000110101")
        delay_print("001111000010001000011111001100100100100100101001010001100010000010010010010010100101000110001000100010101111101001001001010010100011010011110111110")
        delay_print("010110101110010010111110011100010010010010010100101000110001000111000010011110101001001001010010100011010101101")
        delay_print("1010000000111110111001010111101100100100101001010001101001101110001")
        delay_print("11001100000110001000111111010110010010010010010100101000110001000111001001001010010100011000000111010011010111")
        delay_print("1000000110010111010101000110001000100100100100101001010001100010000111100100100101001010001101111111011101001000")
        delay_print("000010001100001111111011010010010010100101000110110010011100001")
        delay_print("1110100111110010010010100101000010010010010010100101000110001000011011001001001010010100011011000101")
        delay_print("11001100101000110011010000011000011010001001001001001010010100011001000010101")
        delay_print("0011110000100010000111110011100010101111100101001001001010010100011010111110")
        delay_print("01011010111001101001001001010010100000100100100100101001010001100010001101000110111010101101")
        delay_print("10100000001111101110010101111010111001001001010010100011010101011001101110001")
        delay_print("11001100000110001001001001001010010100011000100000111010011010111")
        delay_print("100000011001011101010100011000110001001001001001010010100011000100001001001010010100011011111011101001000")
        delay_print("00001000110000110010010010100101000110111100001100110010011100001")
        delay_print("11101001111100100100101001010000010010010010010100101000110001000110000100100100100101001010001100010000010010010010111001011000101")
        delay_print("1100110010100011001101000001100100100100100101001010001100010000100100100101001010001100100010000101001000010101")
        delay_print("00111100001010010010010100101000110111110010010011110111110")

        delay_print("01011010111001001011111001110111000010011001001001001001010010100011000100011010101110101011011001001010010001001001")
        delay_print("1010000000111110111001010111101011001110100010010010010010100101000110001000101011001101110001100100110")
        delay_print("110011000001100010001111110001001001001001010010100011000100010111101010010000011101001101011110010110110")
        delay_print("1000000110010111010101000110010010010010010100101000110001000000100111101011111111011101001000100111")
        delay_print("000010001100001111111011010001001001001001010010100011000100001000111110000110011001001110000110010010010100101000110")
        delay_print("1110100111111110001100110000010010010010010100101000110001000011000010010010010111001011000101100101001001010010")
        delay_print("11001100101000110011010000000100100100100101001010010010010010010100101000110001000000110001000110000110100010000101001000010101100100100101001000")
        delay_print("0011110000100010000111110010010010010010010100101000110001000110001010111110010010011110100010000101001000010")
        delay_print("010110101110010010111110011100100100100100101001010001100010000111000010011110101011101010110100010000101001000010")
        delay_print("10100000001111101110010100100100100100101001010001100010000111001001001001001010010100011000100010101100111010101011001100100100101001010001101")
        delay_print("110011000001100010001111110100100100100100101001010001100010000111101010010000011101001110010010010100101000110010111")
        delay_print("1000000110010111010101000110000100100100100101001010001100010000100111101011111111011101001000")
        delay_print("00001000110000111111101101001001000010010010010010100101000110001000100100100101001010001100010000001111100100100100101001010001101100001")
        delay_print("11101001111111100011001100001001001001001001010010100011000100010000100100100100101001010001100010010111001011000101")
        delay_print("110011001010001100110100000110010010010010010100101000110001000001001010010010010100101000110000010101")
        delay_print("00111100001000100001111100111001001000100100100100101001010001100010000100100101001010001100010000001010v00100110010010010100101000110110111110")
        delay_print("01011010111001001011111001110001001001001001010010100011000100011100001001111010101110100100100101001010001101101")
        delay_print("101000000011111011100100100100100100101001010001100010000101111010110011101010101101001001001010010100011001110001")
        delay_print("1100110000011000100011001001001001001010010100011000100011110101111010100100000110010010010100101000110010011010111")
        delay_print("100000011001011101010100100100100100101001010001100010000001100010011110101111111100100100101001010001101001000")
        delay_print("00001000110000111100100100100001001001001001010010100011000100010010100101000110001000111011010010001111101001001001010010100011010010011100001")
        delay_print("111010011111111000110011001001001001001010010100011000100000001110010010010100101000110010111001011000101")
        delay_print("1100110010100011001101000001100010010010010100101000110001000010101")
        delay_print("001111000010001000011111001001001001001010010100011000100000111000101011111001001001001010010100011010011110111110")
        delay_print("0101101011100100101111100111011100100100100101001010001100111101010111010101101")
        delay_print("1010000000111110111001010111101011001110101001001001010010100011001011001101110001")
        delay_print("11001100000110001000111111010111101010010000010010010010100101000110011010111")
        delay_print("1000000110010111010101000010010010010010100101000110001000011000100111101011v11011101001000")
        delay_print("000010001100001111110010010010100101000110110010011100001")
        delay_print("1111001001001010010100011000010010010010111001011000101")
        delay_print("1100110010100011001110010010010100101000110101")
        delay_print("001111000010001000011111001100100100100100101001010001100010000010010010010010100101000110001000100010101111101001001001010010100011010011110111110")
        delay_print("010110101110010010111110011100010010010010010100101000110001000111000010011110101001001001010010100011010101101")
        delay_print("1010000000111110111001010111101100100100101001010001101001101110001")
        delay_print("11001100000110001000111111010110010010010010010100101000110001000111001001001010010100011000000111010011010111")
        delay_print("1000000110010111010101000110001000100100100100101001010001100010000111100100100101001010001101111111011101001000")
        delay_print("000010001100001111111011010010010010100101000110110010011100001")
        delay_print("1110100111110010010010100101000010010010010010100101000110001000011011001001001010010100011011000101")
        delay_print("11001100101000110011010000011000011010001001001001001010010100011001000010101")
        delay_print("0011110000100010000111110011100010101111100101001001001010010100011010111110")
        delay_print("01011010111001101001001001010010100000100100100100101001010001100010001101000110111010101101")
        delay_print("10100000001111101110010101111010111001001001010010100011010101011001101110001")
        delay_print("11001100000110001001001001001010010100011000100000111010011010111")
        delay_print("100000011001011101010100011000110001001001001001010010100011000100001001001010010100011011111011101001000")
        delay_print("00001000110000110010010010100101000110111100001100110010011100001")
        delay_print("11101001111100100100101001010000010010010010010100101000110001000110000100100100100101001010001100010000010010010010111001011000101")
        delay_print("1100110010100011001101000001100100100100100101001010001100010000100100100101001010001100100010000101001000010101")
        delay_print("00111100001010010010010100101000110111110010010011110111110")
        
        

        


        printtime = 0.01
        amountstartlines = 10
        allem = []

        binorword = "w"
        zfontzs = pygame.freetype.Font(f'fonts/9_$customterminalbytheo.ttf', 30)
        
        #delay_print((random.randint(0,1) + random.randint(0,1) + random.randint(0,1) + random.randint(0,1) + random.randint(0,1) + random.randint(0,1)))
        delay_print('*************** PIP-OS(R) V7.1.0.8 ***************')
        delay_print('')
        delay_print('')
        
        delay_print('COPYRIGHT 2075 ROBCO(R)')
        
        delay_print('LOADER V1.1')
        
        delay_print('EXEC VERSION 41.10')
        
        delay_print('64K RAM SYSTEM')
    
        delay_print('38911 BYTES FREE')
        
        delay_print('NO HOLOTAPE FOUND') #change when holotape is implemented #('HOLOTAPE (', holotape name, ') FOUND')
        
        delay_print('LOAD ROM(1): DEITRIX 303')
        time.sleep(1)


        loadimg = [pygame.image.load(f"sprites/BootSequence/92.png"), pygame.image.load(f"sprites/BootSequence/92.png"), pygame.image.load(f"sprites/BootSequence/92.png"), pygame.image.load(f"sprites/BootSequence/94.png"), pygame.image.load(f"sprites/BootSequence/95.png"), pygame.image.load(f"sprites/BootSequence/96.png"), pygame.image.load(f"sprites/BootSequence/97.png"), pygame.image.load(f"sprites/BootSequence/98.png"), pygame.image.load(f"sprites/BootSequence/99.png"), pygame.image.load(f"sprites/BootSequence/100.png"), pygame.image.load(f"sprites/BootSequence/100.png"), pygame.image.load(f"sprites/BootSequence/100.png")]
        blaberstaber = 0
        initalphas = [50, 75, 100, 125, 150, 175, 200, 225, 0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 0, 25, 50, 75, 100, 125, 150, 175, 200, 225, ]
        
        for blarbersd in range(len(loadimg)):
            for blabersd in range(1, 4):
                blaberstaber += 1
                loadedimg = loadimg[blarbersd]
                loadrect = loadedimg.get_rect()
                loadedimg.fill((255, 255, 255, 0), special_flags=pygame.BLEND_RGBA_MAX)
                loadedimg.fill(colr, special_flags=pygame.BLEND_RGBA_MIN)
                loadrect.center = (438, 350)

                initimg = pygame.image.load(f"sprites/BootSequence/93.png")
                initrect = initimg.get_rect()
                initimg.fill((255, 255, 255, 0), special_flags=pygame.BLEND_RGBA_MAX)
                colralphad = colr + ((initalphas[blaberstaber]),)
                initimg.fill(colralphad, special_flags=pygame.BLEND_RGBA_MIN)
                initrect.center = (438, 480)

                screen.fill(backColr)
                screen.blit(loadedimg, loadrect)
                screen.blit(initimg, initrect)
                time.sleep(.05)
                pygame.display.update()



#deitrix.Bootstrap()     #make nirmal when want startup




stats_group = pygame.sprite.Group()
items_group = pygame.sprite.Group()
data_group = pygame.sprite.Group()
map_group = pygame.sprite.Group()
radio_group = pygame.sprite.Group()

rads = rad(20, 15)
#headd = Header()
stats_group.add(rads)




while running:
       #when have the rotary encoder, use that

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RIGHTBRACKET:
                if headerxzs < 5:
                    headerxzs += 1
            if event.key == pygame.K_LEFTBRACKET:
                if headerxzs > 1:
                    headerxzs -= 1
    screen.fill(backColr)

    # RENDER YOUR GAME HERE
    
    pos = pygame.mouse.get_pos()
 
    
    #colr = (0, (pos[0] % 255), 100, 255)
    #secolr = (  0,   (pos[1] % 255),   0)
    #rads.image.fill(colr, special_flags=pygame.BLEND_RGBA_MIN)
    pygame.draw.rect(screen, (255, 100, 5, 20), (200, 300,200, 100))
    pygame.draw.rect(screen, (5, 100, 255, 20), (250, 350,200, 100))

    stats_group.draw(screen)
    GeneralGUI()

    if headerxzs == 1:
        stats_group.update()
        

    # flip() the display to put your work on screen
    pygame.display.update()
    
    clock.tick(32)  # limits FPS to 60

pygame.quit()